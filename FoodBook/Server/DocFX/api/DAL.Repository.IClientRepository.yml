### YamlMime:ManagedReference
items:
- uid: DAL.Repository.IClientRepository
  commentId: T:DAL.Repository.IClientRepository
  id: IClientRepository
  parent: DAL.Repository
  children: []
  langs:
  - csharp
  - vb
  name: IClientRepository
  nameWithType: IClientRepository
  fullName: DAL.Repository.IClientRepository
  type: Interface
  source:
    remote:
      path: FoodBook/Server/DAL/Repository/IClientRepository.cs
      branch: main
      repo: https://github.com/Boutanche/FoodBook/
    id: IClientRepository
    path: E:/Fbook/FoodBook/Server/DAL/Repository/IClientRepository.cs
    startLine: 9
  assemblies:
  - DAL
  namespace: DAL.Repository
  syntax:
    content: 'public interface IClientRepository : IGenericRepository<Client>'
    content.vb: >-
      Public Interface IClientRepository
          Inherits IGenericRepository(Of Client)
  inheritedMembers:
  - DAL.Repository.IGenericRepository{BO.Entity.Client}.GetAllAsync
  - DAL.Repository.IGenericRepository{BO.Entity.Client}.GetAsync(System.Int32)
  - DAL.Repository.IGenericRepository{BO.Entity.Client}.DeleteAsync(System.Int64)
  - DAL.Repository.IGenericRepository{BO.Entity.Client}.UpdateAsync(BO.Entity.Client)
  - DAL.Repository.IGenericRepository{BO.Entity.Client}.InsertAsync(BO.Entity.Client)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
references:
- uid: DAL.Repository
  commentId: N:DAL.Repository
  name: DAL.Repository
  nameWithType: DAL.Repository
  fullName: DAL.Repository
- uid: DAL.Repository.IGenericRepository{BO.Entity.Client}.GetAllAsync
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Client}.GetAllAsync
  parent: DAL.Repository.IGenericRepository{BO.Entity.Client}
  definition: DAL.Repository.IGenericRepository`1.GetAllAsync
  name: GetAllAsync()
  nameWithType: IGenericRepository<Client>.GetAllAsync()
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Client>.GetAllAsync()
  nameWithType.vb: IGenericRepository(Of Client).GetAllAsync()
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Client).GetAllAsync()
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IGenericRepository<Client>.GetAllAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Client>.GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IGenericRepository(Of Client).GetAllAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Client).GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Client}.GetAsync(System.Int32)
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Client}.GetAsync(System.Int32)
  parent: DAL.Repository.IGenericRepository{BO.Entity.Client}
  definition: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
  name: GetAsync(Int32)
  nameWithType: IGenericRepository<Client>.GetAsync(Int32)
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Client>.GetAsync(System.Int32)
  nameWithType.vb: IGenericRepository(Of Client).GetAsync(Int32)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Client).GetAsync(System.Int32)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IGenericRepository<Client>.GetAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Client>.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IGenericRepository(Of Client).GetAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Client).GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Client}.DeleteAsync(System.Int64)
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Client}.DeleteAsync(System.Int64)
  parent: DAL.Repository.IGenericRepository{BO.Entity.Client}
  definition: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
  name: DeleteAsync(Int64)
  nameWithType: IGenericRepository<Client>.DeleteAsync(Int64)
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Client>.DeleteAsync(System.Int64)
  nameWithType.vb: IGenericRepository(Of Client).DeleteAsync(Int64)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Client).DeleteAsync(System.Int64)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
    name: DeleteAsync
    nameWithType: IGenericRepository<Client>.DeleteAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Client>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
    name: DeleteAsync
    nameWithType: IGenericRepository(Of Client).DeleteAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Client).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Client}.UpdateAsync(BO.Entity.Client)
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Client}.UpdateAsync(BO.Entity.Client)
  parent: DAL.Repository.IGenericRepository{BO.Entity.Client}
  definition: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
  name: UpdateAsync(Client)
  nameWithType: IGenericRepository<Client>.UpdateAsync(Client)
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Client>.UpdateAsync(BO.Entity.Client)
  nameWithType.vb: IGenericRepository(Of Client).UpdateAsync(Client)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Client).UpdateAsync(BO.Entity.Client)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IGenericRepository<Client>.UpdateAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Client>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: BO.Entity.Client
    name: Client
    nameWithType: Client
    fullName: BO.Entity.Client
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IGenericRepository(Of Client).UpdateAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Client).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: BO.Entity.Client
    name: Client
    nameWithType: Client
    fullName: BO.Entity.Client
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Client}.InsertAsync(BO.Entity.Client)
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Client}.InsertAsync(BO.Entity.Client)
  parent: DAL.Repository.IGenericRepository{BO.Entity.Client}
  definition: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
  name: InsertAsync(Client)
  nameWithType: IGenericRepository<Client>.InsertAsync(Client)
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Client>.InsertAsync(BO.Entity.Client)
  nameWithType.vb: IGenericRepository(Of Client).InsertAsync(Client)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Client).InsertAsync(BO.Entity.Client)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IGenericRepository<Client>.InsertAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Client>.InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: BO.Entity.Client
    name: Client
    nameWithType: Client
    fullName: BO.Entity.Client
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IGenericRepository(Of Client).InsertAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Client).InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: BO.Entity.Client
    name: Client
    nameWithType: Client
    fullName: BO.Entity.Client
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.GetAllAsync
  commentId: M:DAL.Repository.IGenericRepository`1.GetAllAsync
  name: GetAllAsync()
  nameWithType: IGenericRepository<TEntity>.GetAllAsync()
  fullName: DAL.Repository.IGenericRepository<TEntity>.GetAllAsync()
  nameWithType.vb: IGenericRepository(Of TEntity).GetAllAsync()
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).GetAllAsync()
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IGenericRepository<TEntity>.GetAllAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IGenericRepository(Of TEntity).GetAllAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Client}
  commentId: T:DAL.Repository.IGenericRepository{BO.Entity.Client}
  parent: DAL.Repository
  definition: DAL.Repository.IGenericRepository`1
  name: IGenericRepository<Client>
  nameWithType: IGenericRepository<Client>
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Client>
  nameWithType.vb: IGenericRepository(Of Client)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Client)
  name.vb: IGenericRepository(Of Client)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: DAL.Repository.IGenericRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: BO.Entity.Client
    name: Client
    nameWithType: Client
    fullName: BO.Entity.Client
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: DAL.Repository.IGenericRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BO.Entity.Client
    name: Client
    nameWithType: Client
    fullName: BO.Entity.Client
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
  commentId: M:DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
  isExternal: true
  name: GetAsync(Int32)
  nameWithType: IGenericRepository<TEntity>.GetAsync(Int32)
  fullName: DAL.Repository.IGenericRepository<TEntity>.GetAsync(System.Int32)
  nameWithType.vb: IGenericRepository(Of TEntity).GetAsync(Int32)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).GetAsync(System.Int32)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IGenericRepository<TEntity>.GetAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IGenericRepository(Of TEntity).GetAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
  commentId: M:DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
  isExternal: true
  name: DeleteAsync(Int64)
  nameWithType: IGenericRepository<TEntity>.DeleteAsync(Int64)
  fullName: DAL.Repository.IGenericRepository<TEntity>.DeleteAsync(System.Int64)
  nameWithType.vb: IGenericRepository(Of TEntity).DeleteAsync(Int64)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).DeleteAsync(System.Int64)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
    name: DeleteAsync
    nameWithType: IGenericRepository<TEntity>.DeleteAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
    name: DeleteAsync
    nameWithType: IGenericRepository(Of TEntity).DeleteAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
  commentId: M:DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
  name: UpdateAsync(TEntity)
  nameWithType: IGenericRepository<TEntity>.UpdateAsync(TEntity)
  fullName: DAL.Repository.IGenericRepository<TEntity>.UpdateAsync(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).UpdateAsync(TEntity)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).UpdateAsync(TEntity)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IGenericRepository<TEntity>.UpdateAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IGenericRepository(Of TEntity).UpdateAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
  commentId: M:DAL.Repository.IGenericRepository`1.InsertAsync(`0)
  name: InsertAsync(TEntity)
  nameWithType: IGenericRepository<TEntity>.InsertAsync(TEntity)
  fullName: DAL.Repository.IGenericRepository<TEntity>.InsertAsync(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).InsertAsync(TEntity)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).InsertAsync(TEntity)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IGenericRepository<TEntity>.InsertAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IGenericRepository(Of TEntity).InsertAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1
  commentId: T:DAL.Repository.IGenericRepository`1
  name: IGenericRepository<TEntity>
  nameWithType: IGenericRepository<TEntity>
  fullName: DAL.Repository.IGenericRepository<TEntity>
  nameWithType.vb: IGenericRepository(Of TEntity)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity)
  name.vb: IGenericRepository(Of TEntity)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: DAL.Repository.IGenericRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: DAL.Repository.IGenericRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
