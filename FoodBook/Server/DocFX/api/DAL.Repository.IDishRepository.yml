### YamlMime:ManagedReference
items:
- uid: DAL.Repository.IDishRepository
  commentId: T:DAL.Repository.IDishRepository
  id: IDishRepository
  parent: DAL.Repository
  children:
  - DAL.Repository.IDishRepository.GetAsyncByName(System.String)
  langs:
  - csharp
  - vb
  name: IDishRepository
  nameWithType: IDishRepository
  fullName: DAL.Repository.IDishRepository
  type: Interface
  source:
    remote:
      path: FoodBook/Server/DAL/Repository/IDishRepository.cs
      branch: main
      repo: https://github.com/Boutanche/FoodBook/
    id: IDishRepository
    path: E:/Fbook/FoodBook/Server/DAL/Repository/IDishRepository.cs
    startLine: 9
  assemblies:
  - DAL
  namespace: DAL.Repository
  syntax:
    content: 'public interface IDishRepository : IGenericRepository<Dish>'
    content.vb: >-
      Public Interface IDishRepository
          Inherits IGenericRepository(Of Dish)
  inheritedMembers:
  - DAL.Repository.IGenericRepository{BO.Entity.Dish}.GetAllAsync
  - DAL.Repository.IGenericRepository{BO.Entity.Dish}.GetAsync(System.Int32)
  - DAL.Repository.IGenericRepository{BO.Entity.Dish}.DeleteAsync(System.Int64)
  - DAL.Repository.IGenericRepository{BO.Entity.Dish}.UpdateAsync(BO.Entity.Dish)
  - DAL.Repository.IGenericRepository{BO.Entity.Dish}.InsertAsync(BO.Entity.Dish)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: DAL.Repository.IDishRepository.GetAsyncByName(System.String)
  commentId: M:DAL.Repository.IDishRepository.GetAsyncByName(System.String)
  id: GetAsyncByName(System.String)
  parent: DAL.Repository.IDishRepository
  langs:
  - csharp
  - vb
  name: GetAsyncByName(String)
  nameWithType: IDishRepository.GetAsyncByName(String)
  fullName: DAL.Repository.IDishRepository.GetAsyncByName(System.String)
  type: Method
  source:
    remote:
      path: FoodBook/Server/DAL/Repository/IDishRepository.cs
      branch: main
      repo: https://github.com/Boutanche/FoodBook/
    id: GetAsyncByName
    path: E:/Fbook/FoodBook/Server/DAL/Repository/IDishRepository.cs
    startLine: 12
  assemblies:
  - DAL
  namespace: DAL.Repository
  syntax:
    content: Task<Dish> GetAsyncByName(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Threading.Tasks.Task{BO.Entity.Dish}
    content.vb: Function GetAsyncByName(name As String) As Task(Of Dish)
  overload: DAL.Repository.IDishRepository.GetAsyncByName*
references:
- uid: DAL.Repository
  commentId: N:DAL.Repository
  name: DAL.Repository
  nameWithType: DAL.Repository
  fullName: DAL.Repository
- uid: DAL.Repository.IGenericRepository{BO.Entity.Dish}.GetAllAsync
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Dish}.GetAllAsync
  parent: DAL.Repository.IGenericRepository{BO.Entity.Dish}
  definition: DAL.Repository.IGenericRepository`1.GetAllAsync
  name: GetAllAsync()
  nameWithType: IGenericRepository<Dish>.GetAllAsync()
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Dish>.GetAllAsync()
  nameWithType.vb: IGenericRepository(Of Dish).GetAllAsync()
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Dish).GetAllAsync()
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IGenericRepository<Dish>.GetAllAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Dish>.GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IGenericRepository(Of Dish).GetAllAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Dish).GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Dish}.GetAsync(System.Int32)
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Dish}.GetAsync(System.Int32)
  parent: DAL.Repository.IGenericRepository{BO.Entity.Dish}
  definition: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
  name: GetAsync(Int32)
  nameWithType: IGenericRepository<Dish>.GetAsync(Int32)
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Dish>.GetAsync(System.Int32)
  nameWithType.vb: IGenericRepository(Of Dish).GetAsync(Int32)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Dish).GetAsync(System.Int32)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IGenericRepository<Dish>.GetAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Dish>.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IGenericRepository(Of Dish).GetAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Dish).GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Dish}.DeleteAsync(System.Int64)
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Dish}.DeleteAsync(System.Int64)
  parent: DAL.Repository.IGenericRepository{BO.Entity.Dish}
  definition: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
  name: DeleteAsync(Int64)
  nameWithType: IGenericRepository<Dish>.DeleteAsync(Int64)
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Dish>.DeleteAsync(System.Int64)
  nameWithType.vb: IGenericRepository(Of Dish).DeleteAsync(Int64)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Dish).DeleteAsync(System.Int64)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
    name: DeleteAsync
    nameWithType: IGenericRepository<Dish>.DeleteAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Dish>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
    name: DeleteAsync
    nameWithType: IGenericRepository(Of Dish).DeleteAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Dish).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Dish}.UpdateAsync(BO.Entity.Dish)
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Dish}.UpdateAsync(BO.Entity.Dish)
  parent: DAL.Repository.IGenericRepository{BO.Entity.Dish}
  definition: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
  name: UpdateAsync(Dish)
  nameWithType: IGenericRepository<Dish>.UpdateAsync(Dish)
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Dish>.UpdateAsync(BO.Entity.Dish)
  nameWithType.vb: IGenericRepository(Of Dish).UpdateAsync(Dish)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Dish).UpdateAsync(BO.Entity.Dish)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IGenericRepository<Dish>.UpdateAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Dish>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: BO.Entity.Dish
    name: Dish
    nameWithType: Dish
    fullName: BO.Entity.Dish
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IGenericRepository(Of Dish).UpdateAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Dish).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: BO.Entity.Dish
    name: Dish
    nameWithType: Dish
    fullName: BO.Entity.Dish
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Dish}.InsertAsync(BO.Entity.Dish)
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Dish}.InsertAsync(BO.Entity.Dish)
  parent: DAL.Repository.IGenericRepository{BO.Entity.Dish}
  definition: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
  name: InsertAsync(Dish)
  nameWithType: IGenericRepository<Dish>.InsertAsync(Dish)
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Dish>.InsertAsync(BO.Entity.Dish)
  nameWithType.vb: IGenericRepository(Of Dish).InsertAsync(Dish)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Dish).InsertAsync(BO.Entity.Dish)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IGenericRepository<Dish>.InsertAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Dish>.InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: BO.Entity.Dish
    name: Dish
    nameWithType: Dish
    fullName: BO.Entity.Dish
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IGenericRepository(Of Dish).InsertAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Dish).InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: BO.Entity.Dish
    name: Dish
    nameWithType: Dish
    fullName: BO.Entity.Dish
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.GetAllAsync
  commentId: M:DAL.Repository.IGenericRepository`1.GetAllAsync
  name: GetAllAsync()
  nameWithType: IGenericRepository<TEntity>.GetAllAsync()
  fullName: DAL.Repository.IGenericRepository<TEntity>.GetAllAsync()
  nameWithType.vb: IGenericRepository(Of TEntity).GetAllAsync()
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).GetAllAsync()
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IGenericRepository<TEntity>.GetAllAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IGenericRepository(Of TEntity).GetAllAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Dish}
  commentId: T:DAL.Repository.IGenericRepository{BO.Entity.Dish}
  parent: DAL.Repository
  definition: DAL.Repository.IGenericRepository`1
  name: IGenericRepository<Dish>
  nameWithType: IGenericRepository<Dish>
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Dish>
  nameWithType.vb: IGenericRepository(Of Dish)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Dish)
  name.vb: IGenericRepository(Of Dish)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: DAL.Repository.IGenericRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: BO.Entity.Dish
    name: Dish
    nameWithType: Dish
    fullName: BO.Entity.Dish
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: DAL.Repository.IGenericRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BO.Entity.Dish
    name: Dish
    nameWithType: Dish
    fullName: BO.Entity.Dish
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
  commentId: M:DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
  isExternal: true
  name: GetAsync(Int32)
  nameWithType: IGenericRepository<TEntity>.GetAsync(Int32)
  fullName: DAL.Repository.IGenericRepository<TEntity>.GetAsync(System.Int32)
  nameWithType.vb: IGenericRepository(Of TEntity).GetAsync(Int32)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).GetAsync(System.Int32)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IGenericRepository<TEntity>.GetAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IGenericRepository(Of TEntity).GetAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
  commentId: M:DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
  isExternal: true
  name: DeleteAsync(Int64)
  nameWithType: IGenericRepository<TEntity>.DeleteAsync(Int64)
  fullName: DAL.Repository.IGenericRepository<TEntity>.DeleteAsync(System.Int64)
  nameWithType.vb: IGenericRepository(Of TEntity).DeleteAsync(Int64)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).DeleteAsync(System.Int64)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
    name: DeleteAsync
    nameWithType: IGenericRepository<TEntity>.DeleteAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
    name: DeleteAsync
    nameWithType: IGenericRepository(Of TEntity).DeleteAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
  commentId: M:DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
  name: UpdateAsync(TEntity)
  nameWithType: IGenericRepository<TEntity>.UpdateAsync(TEntity)
  fullName: DAL.Repository.IGenericRepository<TEntity>.UpdateAsync(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).UpdateAsync(TEntity)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).UpdateAsync(TEntity)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IGenericRepository<TEntity>.UpdateAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IGenericRepository(Of TEntity).UpdateAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
  commentId: M:DAL.Repository.IGenericRepository`1.InsertAsync(`0)
  name: InsertAsync(TEntity)
  nameWithType: IGenericRepository<TEntity>.InsertAsync(TEntity)
  fullName: DAL.Repository.IGenericRepository<TEntity>.InsertAsync(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).InsertAsync(TEntity)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).InsertAsync(TEntity)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IGenericRepository<TEntity>.InsertAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IGenericRepository(Of TEntity).InsertAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1
  commentId: T:DAL.Repository.IGenericRepository`1
  name: IGenericRepository<TEntity>
  nameWithType: IGenericRepository<TEntity>
  fullName: DAL.Repository.IGenericRepository<TEntity>
  nameWithType.vb: IGenericRepository(Of TEntity)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity)
  name.vb: IGenericRepository(Of TEntity)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: DAL.Repository.IGenericRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: DAL.Repository.IGenericRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IDishRepository.GetAsyncByName*
  commentId: Overload:DAL.Repository.IDishRepository.GetAsyncByName
  name: GetAsyncByName
  nameWithType: IDishRepository.GetAsyncByName
  fullName: DAL.Repository.IDishRepository.GetAsyncByName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{BO.Entity.Dish}
  commentId: T:System.Threading.Tasks.Task{BO.Entity.Dish}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Dish>
  nameWithType: Task<Dish>
  fullName: System.Threading.Tasks.Task<BO.Entity.Dish>
  nameWithType.vb: Task(Of Dish)
  fullName.vb: System.Threading.Tasks.Task(Of BO.Entity.Dish)
  name.vb: Task(Of Dish)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BO.Entity.Dish
    name: Dish
    nameWithType: Dish
    fullName: BO.Entity.Dish
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BO.Entity.Dish
    name: Dish
    nameWithType: Dish
    fullName: BO.Entity.Dish
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
