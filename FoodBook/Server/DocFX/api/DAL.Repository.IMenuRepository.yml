### YamlMime:ManagedReference
items:
- uid: DAL.Repository.IMenuRepository
  commentId: T:DAL.Repository.IMenuRepository
  id: IMenuRepository
  parent: DAL.Repository
  children:
  - DAL.Repository.IMenuRepository.GetMenuByIdAsync(System.Int32)
  langs:
  - csharp
  - vb
  name: IMenuRepository
  nameWithType: IMenuRepository
  fullName: DAL.Repository.IMenuRepository
  type: Interface
  source:
    remote:
      path: FoodBook/Server/DAL/Repository/IMenuRepository.cs
      branch: main
      repo: https://github.com/Boutanche/FoodBook/
    id: IMenuRepository
    path: E:/Fbook/FoodBook/Server/DAL/Repository/IMenuRepository.cs
    startLine: 9
  assemblies:
  - DAL
  namespace: DAL.Repository
  syntax:
    content: 'public interface IMenuRepository : IGenericRepository<Menu>'
    content.vb: >-
      Public Interface IMenuRepository
          Inherits IGenericRepository(Of Menu)
  inheritedMembers:
  - DAL.Repository.IGenericRepository{BO.Entity.Menu}.GetAllAsync
  - DAL.Repository.IGenericRepository{BO.Entity.Menu}.GetAsync(System.Int32)
  - DAL.Repository.IGenericRepository{BO.Entity.Menu}.DeleteAsync(System.Int64)
  - DAL.Repository.IGenericRepository{BO.Entity.Menu}.UpdateAsync(BO.Entity.Menu)
  - DAL.Repository.IGenericRepository{BO.Entity.Menu}.InsertAsync(BO.Entity.Menu)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: DAL.Repository.IMenuRepository.GetMenuByIdAsync(System.Int32)
  commentId: M:DAL.Repository.IMenuRepository.GetMenuByIdAsync(System.Int32)
  id: GetMenuByIdAsync(System.Int32)
  parent: DAL.Repository.IMenuRepository
  langs:
  - csharp
  - vb
  name: GetMenuByIdAsync(Int32)
  nameWithType: IMenuRepository.GetMenuByIdAsync(Int32)
  fullName: DAL.Repository.IMenuRepository.GetMenuByIdAsync(System.Int32)
  type: Method
  source:
    remote:
      path: FoodBook/Server/DAL/Repository/IMenuRepository.cs
      branch: main
      repo: https://github.com/Boutanche/FoodBook/
    id: GetMenuByIdAsync
    path: E:/Fbook/FoodBook/Server/DAL/Repository/IMenuRepository.cs
    startLine: 11
  assemblies:
  - DAL
  namespace: DAL.Repository
  syntax:
    content: Task<Menu> GetMenuByIdAsync(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task{BO.Entity.Menu}
    content.vb: Function GetMenuByIdAsync(id As Integer) As Task(Of Menu)
  overload: DAL.Repository.IMenuRepository.GetMenuByIdAsync*
references:
- uid: DAL.Repository
  commentId: N:DAL.Repository
  name: DAL.Repository
  nameWithType: DAL.Repository
  fullName: DAL.Repository
- uid: DAL.Repository.IGenericRepository{BO.Entity.Menu}.GetAllAsync
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Menu}.GetAllAsync
  parent: DAL.Repository.IGenericRepository{BO.Entity.Menu}
  definition: DAL.Repository.IGenericRepository`1.GetAllAsync
  name: GetAllAsync()
  nameWithType: IGenericRepository<Menu>.GetAllAsync()
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Menu>.GetAllAsync()
  nameWithType.vb: IGenericRepository(Of Menu).GetAllAsync()
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Menu).GetAllAsync()
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IGenericRepository<Menu>.GetAllAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Menu>.GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IGenericRepository(Of Menu).GetAllAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Menu).GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Menu}.GetAsync(System.Int32)
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Menu}.GetAsync(System.Int32)
  parent: DAL.Repository.IGenericRepository{BO.Entity.Menu}
  definition: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
  name: GetAsync(Int32)
  nameWithType: IGenericRepository<Menu>.GetAsync(Int32)
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Menu>.GetAsync(System.Int32)
  nameWithType.vb: IGenericRepository(Of Menu).GetAsync(Int32)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Menu).GetAsync(System.Int32)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IGenericRepository<Menu>.GetAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Menu>.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IGenericRepository(Of Menu).GetAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Menu).GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Menu}.DeleteAsync(System.Int64)
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Menu}.DeleteAsync(System.Int64)
  parent: DAL.Repository.IGenericRepository{BO.Entity.Menu}
  definition: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
  name: DeleteAsync(Int64)
  nameWithType: IGenericRepository<Menu>.DeleteAsync(Int64)
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Menu>.DeleteAsync(System.Int64)
  nameWithType.vb: IGenericRepository(Of Menu).DeleteAsync(Int64)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Menu).DeleteAsync(System.Int64)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
    name: DeleteAsync
    nameWithType: IGenericRepository<Menu>.DeleteAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Menu>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
    name: DeleteAsync
    nameWithType: IGenericRepository(Of Menu).DeleteAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Menu).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Menu}.UpdateAsync(BO.Entity.Menu)
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Menu}.UpdateAsync(BO.Entity.Menu)
  parent: DAL.Repository.IGenericRepository{BO.Entity.Menu}
  definition: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
  name: UpdateAsync(Menu)
  nameWithType: IGenericRepository<Menu>.UpdateAsync(Menu)
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Menu>.UpdateAsync(BO.Entity.Menu)
  nameWithType.vb: IGenericRepository(Of Menu).UpdateAsync(Menu)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Menu).UpdateAsync(BO.Entity.Menu)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IGenericRepository<Menu>.UpdateAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Menu>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: BO.Entity.Menu
    name: Menu
    nameWithType: Menu
    fullName: BO.Entity.Menu
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IGenericRepository(Of Menu).UpdateAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Menu).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: BO.Entity.Menu
    name: Menu
    nameWithType: Menu
    fullName: BO.Entity.Menu
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Menu}.InsertAsync(BO.Entity.Menu)
  commentId: M:DAL.Repository.IGenericRepository{BO.Entity.Menu}.InsertAsync(BO.Entity.Menu)
  parent: DAL.Repository.IGenericRepository{BO.Entity.Menu}
  definition: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
  name: InsertAsync(Menu)
  nameWithType: IGenericRepository<Menu>.InsertAsync(Menu)
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Menu>.InsertAsync(BO.Entity.Menu)
  nameWithType.vb: IGenericRepository(Of Menu).InsertAsync(Menu)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Menu).InsertAsync(BO.Entity.Menu)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IGenericRepository<Menu>.InsertAsync
    fullName: DAL.Repository.IGenericRepository<BO.Entity.Menu>.InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: BO.Entity.Menu
    name: Menu
    nameWithType: Menu
    fullName: BO.Entity.Menu
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IGenericRepository(Of Menu).InsertAsync
    fullName: DAL.Repository.IGenericRepository(Of BO.Entity.Menu).InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: BO.Entity.Menu
    name: Menu
    nameWithType: Menu
    fullName: BO.Entity.Menu
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.GetAllAsync
  commentId: M:DAL.Repository.IGenericRepository`1.GetAllAsync
  name: GetAllAsync()
  nameWithType: IGenericRepository<TEntity>.GetAllAsync()
  fullName: DAL.Repository.IGenericRepository<TEntity>.GetAllAsync()
  nameWithType.vb: IGenericRepository(Of TEntity).GetAllAsync()
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).GetAllAsync()
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IGenericRepository<TEntity>.GetAllAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IGenericRepository(Of TEntity).GetAllAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository{BO.Entity.Menu}
  commentId: T:DAL.Repository.IGenericRepository{BO.Entity.Menu}
  parent: DAL.Repository
  definition: DAL.Repository.IGenericRepository`1
  name: IGenericRepository<Menu>
  nameWithType: IGenericRepository<Menu>
  fullName: DAL.Repository.IGenericRepository<BO.Entity.Menu>
  nameWithType.vb: IGenericRepository(Of Menu)
  fullName.vb: DAL.Repository.IGenericRepository(Of BO.Entity.Menu)
  name.vb: IGenericRepository(Of Menu)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: DAL.Repository.IGenericRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: BO.Entity.Menu
    name: Menu
    nameWithType: Menu
    fullName: BO.Entity.Menu
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: DAL.Repository.IGenericRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BO.Entity.Menu
    name: Menu
    nameWithType: Menu
    fullName: BO.Entity.Menu
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
  commentId: M:DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
  isExternal: true
  name: GetAsync(Int32)
  nameWithType: IGenericRepository<TEntity>.GetAsync(Int32)
  fullName: DAL.Repository.IGenericRepository<TEntity>.GetAsync(System.Int32)
  nameWithType.vb: IGenericRepository(Of TEntity).GetAsync(Int32)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).GetAsync(System.Int32)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IGenericRepository<TEntity>.GetAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IGenericRepository(Of TEntity).GetAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
  commentId: M:DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
  isExternal: true
  name: DeleteAsync(Int64)
  nameWithType: IGenericRepository<TEntity>.DeleteAsync(Int64)
  fullName: DAL.Repository.IGenericRepository<TEntity>.DeleteAsync(System.Int64)
  nameWithType.vb: IGenericRepository(Of TEntity).DeleteAsync(Int64)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).DeleteAsync(System.Int64)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
    name: DeleteAsync
    nameWithType: IGenericRepository<TEntity>.DeleteAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.DeleteAsync(System.Int64)
    name: DeleteAsync
    nameWithType: IGenericRepository(Of TEntity).DeleteAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
  commentId: M:DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
  name: UpdateAsync(TEntity)
  nameWithType: IGenericRepository<TEntity>.UpdateAsync(TEntity)
  fullName: DAL.Repository.IGenericRepository<TEntity>.UpdateAsync(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).UpdateAsync(TEntity)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).UpdateAsync(TEntity)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IGenericRepository<TEntity>.UpdateAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IGenericRepository(Of TEntity).UpdateAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
  commentId: M:DAL.Repository.IGenericRepository`1.InsertAsync(`0)
  name: InsertAsync(TEntity)
  nameWithType: IGenericRepository<TEntity>.InsertAsync(TEntity)
  fullName: DAL.Repository.IGenericRepository<TEntity>.InsertAsync(TEntity)
  nameWithType.vb: IGenericRepository(Of TEntity).InsertAsync(TEntity)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity).InsertAsync(TEntity)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IGenericRepository<TEntity>.InsertAsync
    fullName: DAL.Repository.IGenericRepository<TEntity>.InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IGenericRepository(Of TEntity).InsertAsync
    fullName: DAL.Repository.IGenericRepository(Of TEntity).InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IGenericRepository`1
  commentId: T:DAL.Repository.IGenericRepository`1
  name: IGenericRepository<TEntity>
  nameWithType: IGenericRepository<TEntity>
  fullName: DAL.Repository.IGenericRepository<TEntity>
  nameWithType.vb: IGenericRepository(Of TEntity)
  fullName.vb: DAL.Repository.IGenericRepository(Of TEntity)
  name.vb: IGenericRepository(Of TEntity)
  spec.csharp:
  - uid: DAL.Repository.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: DAL.Repository.IGenericRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DAL.Repository.IGenericRepository`1
    name: IGenericRepository
    nameWithType: IGenericRepository
    fullName: DAL.Repository.IGenericRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: DAL.Repository.IMenuRepository.GetMenuByIdAsync*
  commentId: Overload:DAL.Repository.IMenuRepository.GetMenuByIdAsync
  name: GetMenuByIdAsync
  nameWithType: IMenuRepository.GetMenuByIdAsync
  fullName: DAL.Repository.IMenuRepository.GetMenuByIdAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{BO.Entity.Menu}
  commentId: T:System.Threading.Tasks.Task{BO.Entity.Menu}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Menu>
  nameWithType: Task<Menu>
  fullName: System.Threading.Tasks.Task<BO.Entity.Menu>
  nameWithType.vb: Task(Of Menu)
  fullName.vb: System.Threading.Tasks.Task(Of BO.Entity.Menu)
  name.vb: Task(Of Menu)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BO.Entity.Menu
    name: Menu
    nameWithType: Menu
    fullName: BO.Entity.Menu
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BO.Entity.Menu
    name: Menu
    nameWithType: Menu
    fullName: BO.Entity.Menu
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
